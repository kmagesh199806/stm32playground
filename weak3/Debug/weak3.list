
weak3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000248  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d0  080003d8  000013d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003d0  080003d0  000013d8  2**0
                  CONTENTS
  4 .ARM          00000000  080003d0  080003d0  000013d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003d0  080003d8  000013d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d0  080003d0  000013d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003d4  080003d4  000013d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000013d8  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000062e  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000e9  00000000  00000000  00001a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  00001b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000002d  00000000  00000000  00001b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f74  00000000  00000000  00001b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000004e4  00000000  00000000  00002b09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003f13  00000000  00000000  00002fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00006f00  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  00006f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  00006f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003b8 	.word	0x080003b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080003b8 	.word	0x080003b8

080001c8 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  //#warning 3
#endif
uint8_t pin_state; // DECLARE THE VARIBLE
int main(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
    RCC_AHB1ENR *AAHB1ENR = (RCC_AHB1ENR*)0x40023830; // RCC AHB1 clock enablE
 80001ce:	4b4c      	ldr	r3, [pc, #304]	@ (8000300 <main+0x138>)
 80001d0:	617b      	str	r3, [r7, #20]
    GPIOx_MODER *GPIOD_MODER = (GPIOx_MODER *)0x40020C00; // GPIOD mode register
 80001d2:	4b4c      	ldr	r3, [pc, #304]	@ (8000304 <main+0x13c>)
 80001d4:	613b      	str	r3, [r7, #16]
    GPIOx_ODR *GPIOD_ODR = (GPIOx_ODR *)0x40020C14; // GPIOD output data register
 80001d6:	4b4c      	ldr	r3, [pc, #304]	@ (8000308 <main+0x140>)
 80001d8:	60fb      	str	r3, [r7, #12]
    GPIOx_MODER *GPIOA_MODER = (GPIOx_MODER *)0x40020000; // GPIOA mode register
 80001da:	4b4c      	ldr	r3, [pc, #304]	@ (800030c <main+0x144>)
 80001dc:	60bb      	str	r3, [r7, #8]
    GPIOx_IDR *GPIOA_IDR = (GPIOx_IDR*)0x40020010; // GPIOA input data register
 80001de:	4b4c      	ldr	r3, [pc, #304]	@ (8000310 <main+0x148>)
 80001e0:	607b      	str	r3, [r7, #4]
    GPIOx_PUPDR *GPIOA_PULLDOWN = (GPIOx_PUPDR*)0x4002000C; // GPIOA pull-down register
 80001e2:	4b4c      	ldr	r3, [pc, #304]	@ (8000314 <main+0x14c>)
 80001e4:	603b      	str	r3, [r7, #0]

    AAHB1ENR->GPIODEN = 1; // Enable clock for GPIOD
 80001e6:	697a      	ldr	r2, [r7, #20]
 80001e8:	7813      	ldrb	r3, [r2, #0]
 80001ea:	f043 0308 	orr.w	r3, r3, #8
 80001ee:	7013      	strb	r3, [r2, #0]
    AAHB1ENR->GPIOAEN = 1; // Enable clock for GPIOA
 80001f0:	697a      	ldr	r2, [r7, #20]
 80001f2:	7813      	ldrb	r3, [r2, #0]
 80001f4:	f043 0301 	orr.w	r3, r3, #1
 80001f8:	7013      	strb	r3, [r2, #0]
    GPIOD_MODER->MODER13 = 0; // Clear bits for PD13
 80001fa:	693a      	ldr	r2, [r7, #16]
 80001fc:	78d3      	ldrb	r3, [r2, #3]
 80001fe:	f36f 0383 	bfc	r3, #2, #2
 8000202:	70d3      	strb	r3, [r2, #3]
    GPIOD_MODER->MODER13 = 1; // Set PD13 as output
 8000204:	693a      	ldr	r2, [r7, #16]
 8000206:	78d3      	ldrb	r3, [r2, #3]
 8000208:	2101      	movs	r1, #1
 800020a:	f361 0383 	bfi	r3, r1, #2, #2
 800020e:	70d3      	strb	r3, [r2, #3]
    GPIOD_MODER->MODER14 = 0; // Clear bits for PD14
 8000210:	693a      	ldr	r2, [r7, #16]
 8000212:	78d3      	ldrb	r3, [r2, #3]
 8000214:	f36f 1305 	bfc	r3, #4, #2
 8000218:	70d3      	strb	r3, [r2, #3]
    GPIOD_MODER->MODER14 = 1; // Set PD14 as output
 800021a:	693a      	ldr	r2, [r7, #16]
 800021c:	78d3      	ldrb	r3, [r2, #3]
 800021e:	2101      	movs	r1, #1
 8000220:	f361 1305 	bfi	r3, r1, #4, #2
 8000224:	70d3      	strb	r3, [r2, #3]
    GPIOA_MODER->MODER1 = 0; // Set PA1 as input
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	7813      	ldrb	r3, [r2, #0]
 800022a:	f36f 0383 	bfc	r3, #2, #2
 800022e:	7013      	strb	r3, [r2, #0]
    GPIOA_MODER->MODER2 = 0; // Set PA2 as input
 8000230:	68ba      	ldr	r2, [r7, #8]
 8000232:	7813      	ldrb	r3, [r2, #0]
 8000234:	f36f 1305 	bfc	r3, #4, #2
 8000238:	7013      	strb	r3, [r2, #0]

    GPIOA_PULLDOWN->PUPDR1 = 0; // Clear pull-down bits for PA1
 800023a:	683a      	ldr	r2, [r7, #0]
 800023c:	7813      	ldrb	r3, [r2, #0]
 800023e:	f36f 0383 	bfc	r3, #2, #2
 8000242:	7013      	strb	r3, [r2, #0]
    GPIOA_PULLDOWN->PUPDR1 = 2; // Enable pull-down resistor for PA1
 8000244:	683a      	ldr	r2, [r7, #0]
 8000246:	7813      	ldrb	r3, [r2, #0]
 8000248:	2102      	movs	r1, #2
 800024a:	f361 0383 	bfi	r3, r1, #2, #2
 800024e:	7013      	strb	r3, [r2, #0]
    GPIOA_PULLDOWN->PUPDR2 = 0; // Clear pull-down bits for PA2
 8000250:	683a      	ldr	r2, [r7, #0]
 8000252:	7813      	ldrb	r3, [r2, #0]
 8000254:	f36f 1305 	bfc	r3, #4, #2
 8000258:	7013      	strb	r3, [r2, #0]
    GPIOA_PULLDOWN->PUPDR2 = 2; // Enable pull-down resistor for PA2
 800025a:	683a      	ldr	r2, [r7, #0]
 800025c:	7813      	ldrb	r3, [r2, #0]
 800025e:	2102      	movs	r1, #2
 8000260:	f361 1305 	bfi	r3, r1, #4, #2
 8000264:	7013      	strb	r3, [r2, #0]

    while (1)
    {
        pin_state = (uint8_t)(GPIOA_IDR->IDR1 << 1) | (GPIOA_IDR->IDR2); // Read the state of PA1 and PA2
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800026e:	b2db      	uxtb	r3, r3
 8000270:	005b      	lsls	r3, r3, #1
 8000272:	b2db      	uxtb	r3, r3
 8000274:	687a      	ldr	r2, [r7, #4]
 8000276:	7812      	ldrb	r2, [r2, #0]
 8000278:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800027c:	b2d2      	uxtb	r2, r2
 800027e:	4313      	orrs	r3, r2
 8000280:	b2da      	uxtb	r2, r3
 8000282:	4b25      	ldr	r3, [pc, #148]	@ (8000318 <main+0x150>)
 8000284:	701a      	strb	r2, [r3, #0]
        switch (pin_state)
 8000286:	4b24      	ldr	r3, [pc, #144]	@ (8000318 <main+0x150>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b03      	cmp	r3, #3
 800028c:	d8eb      	bhi.n	8000266 <main+0x9e>
 800028e:	a201      	add	r2, pc, #4	@ (adr r2, 8000294 <main+0xcc>)
 8000290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000294:	080002d1 	.word	0x080002d1
 8000298:	080002e7 	.word	0x080002e7
 800029c:	080002bb 	.word	0x080002bb
 80002a0:	080002a5 	.word	0x080002a5
        {
            case 3: // PA1 = 1, PA2 = 1
                GPIOD_ODR->ODR13 = 1; //set pd13 high
 80002a4:	68fa      	ldr	r2, [r7, #12]
 80002a6:	7853      	ldrb	r3, [r2, #1]
 80002a8:	f043 0320 	orr.w	r3, r3, #32
 80002ac:	7053      	strb	r3, [r2, #1]
                GPIOD_ODR->ODR14 = 0; //set pd14 low
 80002ae:	68fa      	ldr	r2, [r7, #12]
 80002b0:	7853      	ldrb	r3, [r2, #1]
 80002b2:	f36f 1386 	bfc	r3, #6, #1
 80002b6:	7053      	strb	r3, [r2, #1]
                break;
 80002b8:	e021      	b.n	80002fe <main+0x136>
            case 2: // PA1 = 1, PA2 = 0
                GPIOD_ODR->ODR13 = 0; //set pd13 low
 80002ba:	68fa      	ldr	r2, [r7, #12]
 80002bc:	7853      	ldrb	r3, [r2, #1]
 80002be:	f36f 1345 	bfc	r3, #5, #1
 80002c2:	7053      	strb	r3, [r2, #1]
                GPIOD_ODR->ODR14 = 0; //set pd14 low
 80002c4:	68fa      	ldr	r2, [r7, #12]
 80002c6:	7853      	ldrb	r3, [r2, #1]
 80002c8:	f36f 1386 	bfc	r3, #6, #1
 80002cc:	7053      	strb	r3, [r2, #1]
                break;
 80002ce:	e016      	b.n	80002fe <main+0x136>
            case 0: // PA1 = 0, PA2 = 0
                GPIOD_ODR->ODR13 = 0; //set pd13 low
 80002d0:	68fa      	ldr	r2, [r7, #12]
 80002d2:	7853      	ldrb	r3, [r2, #1]
 80002d4:	f36f 1345 	bfc	r3, #5, #1
 80002d8:	7053      	strb	r3, [r2, #1]
                GPIOD_ODR->ODR14 = 1; //set pd14 high
 80002da:	68fa      	ldr	r2, [r7, #12]
 80002dc:	7853      	ldrb	r3, [r2, #1]
 80002de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002e2:	7053      	strb	r3, [r2, #1]
                break;
 80002e4:	e00b      	b.n	80002fe <main+0x136>
            case 1: // PA1 = 0, PA2 = 1
                GPIOD_ODR->ODR13 = 1; //set pd13 high
 80002e6:	68fa      	ldr	r2, [r7, #12]
 80002e8:	7853      	ldrb	r3, [r2, #1]
 80002ea:	f043 0320 	orr.w	r3, r3, #32
 80002ee:	7053      	strb	r3, [r2, #1]
                GPIOD_ODR->ODR14 = 1; //set pd14 high
 80002f0:	68fa      	ldr	r2, [r7, #12]
 80002f2:	7853      	ldrb	r3, [r2, #1]
 80002f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002f8:	7053      	strb	r3, [r2, #1]
                break;
 80002fa:	bf00      	nop
 80002fc:	e7b3      	b.n	8000266 <main+0x9e>
        pin_state = (uint8_t)(GPIOA_IDR->IDR1 << 1) | (GPIOA_IDR->IDR2); // Read the state of PA1 and PA2
 80002fe:	e7b2      	b.n	8000266 <main+0x9e>
 8000300:	40023830 	.word	0x40023830
 8000304:	40020c00 	.word	0x40020c00
 8000308:	40020c14 	.word	0x40020c14
 800030c:	40020000 	.word	0x40020000
 8000310:	40020010 	.word	0x40020010
 8000314:	4002000c 	.word	0x4002000c
 8000318:	2000001c 	.word	0x2000001c

0800031c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800031c:	480d      	ldr	r0, [pc, #52]	@ (8000354 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800031e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000320:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000324:	480c      	ldr	r0, [pc, #48]	@ (8000358 <LoopForever+0x6>)
  ldr r1, =_edata
 8000326:	490d      	ldr	r1, [pc, #52]	@ (800035c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000328:	4a0d      	ldr	r2, [pc, #52]	@ (8000360 <LoopForever+0xe>)
  movs r3, #0
 800032a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800032c:	e002      	b.n	8000334 <LoopCopyDataInit>

0800032e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000332:	3304      	adds	r3, #4

08000334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000338:	d3f9      	bcc.n	800032e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033a:	4a0a      	ldr	r2, [pc, #40]	@ (8000364 <LoopForever+0x12>)
  ldr r4, =_ebss
 800033c:	4c0a      	ldr	r4, [pc, #40]	@ (8000368 <LoopForever+0x16>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000340:	e001      	b.n	8000346 <LoopFillZerobss>

08000342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000344:	3204      	adds	r2, #4

08000346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000348:	d3fb      	bcc.n	8000342 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800034a:	f000 f811 	bl	8000370 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800034e:	f7ff ff3b 	bl	80001c8 <main>

08000352 <LoopForever>:

LoopForever:
  b LoopForever
 8000352:	e7fe      	b.n	8000352 <LoopForever>
  ldr   r0, =_estack
 8000354:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800035c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000360:	080003d8 	.word	0x080003d8
  ldr r2, =_sbss
 8000364:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000368:	20000020 	.word	0x20000020

0800036c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800036c:	e7fe      	b.n	800036c <ADC_IRQHandler>
	...

08000370 <__libc_init_array>:
 8000370:	b570      	push	{r4, r5, r6, lr}
 8000372:	4d0d      	ldr	r5, [pc, #52]	@ (80003a8 <__libc_init_array+0x38>)
 8000374:	4c0d      	ldr	r4, [pc, #52]	@ (80003ac <__libc_init_array+0x3c>)
 8000376:	1b64      	subs	r4, r4, r5
 8000378:	10a4      	asrs	r4, r4, #2
 800037a:	2600      	movs	r6, #0
 800037c:	42a6      	cmp	r6, r4
 800037e:	d109      	bne.n	8000394 <__libc_init_array+0x24>
 8000380:	4d0b      	ldr	r5, [pc, #44]	@ (80003b0 <__libc_init_array+0x40>)
 8000382:	4c0c      	ldr	r4, [pc, #48]	@ (80003b4 <__libc_init_array+0x44>)
 8000384:	f000 f818 	bl	80003b8 <_init>
 8000388:	1b64      	subs	r4, r4, r5
 800038a:	10a4      	asrs	r4, r4, #2
 800038c:	2600      	movs	r6, #0
 800038e:	42a6      	cmp	r6, r4
 8000390:	d105      	bne.n	800039e <__libc_init_array+0x2e>
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f855 3b04 	ldr.w	r3, [r5], #4
 8000398:	4798      	blx	r3
 800039a:	3601      	adds	r6, #1
 800039c:	e7ee      	b.n	800037c <__libc_init_array+0xc>
 800039e:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a2:	4798      	blx	r3
 80003a4:	3601      	adds	r6, #1
 80003a6:	e7f2      	b.n	800038e <__libc_init_array+0x1e>
 80003a8:	080003d0 	.word	0x080003d0
 80003ac:	080003d0 	.word	0x080003d0
 80003b0:	080003d0 	.word	0x080003d0
 80003b4:	080003d4 	.word	0x080003d4

080003b8 <_init>:
 80003b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ba:	bf00      	nop
 80003bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003be:	bc08      	pop	{r3}
 80003c0:	469e      	mov	lr, r3
 80003c2:	4770      	bx	lr

080003c4 <_fini>:
 80003c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c6:	bf00      	nop
 80003c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ca:	bc08      	pop	{r3}
 80003cc:	469e      	mov	lr, r3
 80003ce:	4770      	bx	lr
