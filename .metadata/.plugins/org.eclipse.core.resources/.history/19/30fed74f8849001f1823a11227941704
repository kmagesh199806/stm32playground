/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "driver.h" // Include driver header file

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  //#warning 3
#endif
uint8_t pin_state; // DECLARE THE VARIBLE
int main(void)
{
    RCC_AHB1ENR *AAHB1ENR = (RCC_AHB1ENR*)0x40023830; // RCC AHB1 clock enablE
    GPIOx_MODER *GPIOD_MODER = (GPIOx_MODER *)0x40020C00; // GPIOD mode register
    GPIOx_ODR *GPIOD_ODR = (GPIOx_ODR *)0x40020C14; // GPIOD output data register
    GPIOx_MODER *GPIOA_MODER = (GPIOx_MODER *)0x40020000; // GPIOA mode register
    GPIOx_IDR *GPIOA_IDR = (GPIOx_IDR*)0x40020010; // GPIOA input data register
    GPIOx_PUPDR *GPIOA_PULLDOWN = (GPIOx_PUPDR*)0x4002000C; // GPIOA pull-down register

    AAHB1ENR->GPIODEN = 1; // Enable clock for GPIOD
    AAHB1ENR->GPIOAEN = 1; // Enable clock for GPIOA
    GPIOD_MODER->MODER13 = 0; // Clear bits for PD13
    GPIOD_MODER->MODER13 = 1; // Set PD13 as output
    GPIOD_MODER->MODER14 = 0; // Clear bits for PD14
    GPIOD_MODER->MODER14 = 1; // Set PD14 as output
    GPIOA_MODER->MODER1 = 0; // Set PA1 as input
    GPIOA_MODER->MODER2 = 0; // Set PA2 as input

    GPIOA_PULLDOWN->PUPDR1 = 0; // Clear pull-down bits for PA1
    GPIOA_PULLDOWN->PUPDR1 = 2; // Enable pull-down resistor for PA1
    GPIOA_PULLDOWN->PUPDR2 = 0; // Clear pull-down bits for PA2
    GPIOA_PULLDOWN->PUPDR2 = 2; // Enable pull-down resistor for PA2

    while (1)
    {
        pin_state = (uint8_t)(GPIOA_IDR->IDR1 << 1) | (GPIOA_IDR->IDR2); // Read the state of PA1 and PA2
        switch (pin_state)
        {
            case 3: // PA1 = 1, PA2 = 1
                GPIOD_ODR->ODR13 = 1; //set pd13 high
                GPIOD_ODR->ODR14 = 0; //set pd14 low
                break;
            case 2: // PA1 = 1, PA2 = 0
                GPIOD_ODR->ODR13 = 0; //set pd13 low
                GPIOD_ODR->ODR14 = 0; //set pd14 low
                break;
            case 0: // PA1 = 0, PA2 = 0
                GPIOD_ODR->ODR13 = 0; //set pd13 low
                GPIOD_ODR->ODR14 = 0; //set pd14 high
                break;
            case 1: // PA1 = 0, PA2 = 1
                GPIOD_ODR->ODR13 = 1; //set pd13 high
                GPIOD_ODR->ODR14 = 1; //set pd14 high
                break;
        }
    }
}
