
task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000228  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003b0  080003b8  000013b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003b0  080003b0  000013b8  2**0
                  CONTENTS
  4 .ARM          00000000  080003b0  080003b0  000013b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003b0  080003b8  000013b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003b0  080003b0  000013b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003b4  080003b4  000013b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000013b8  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000159  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000bb  00000000  00000000  00001541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  00001600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000002d  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f6a  00000000  00000000  00001675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000503  00000000  00000000  000025df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003c33  00000000  00000000  00002ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00006715  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  00006758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  000067b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000398 	.word	0x08000398

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000398 	.word	0x08000398

080001c8 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
uint8_t pin_state;
int main(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
	uint32_t *rcc=(uint32_t *)0x40023830;
 80001ce:	4b44      	ldr	r3, [pc, #272]	@ (80002e0 <main+0x118>)
 80001d0:	617b      	str	r3, [r7, #20]
	uint32_t *mod_d=(uint32_t *)0x40020C00;
 80001d2:	4b44      	ldr	r3, [pc, #272]	@ (80002e4 <main+0x11c>)
 80001d4:	613b      	str	r3, [r7, #16]
	uint32_t *odr_d=(uint32_t *)0x40020C14;
 80001d6:	4b44      	ldr	r3, [pc, #272]	@ (80002e8 <main+0x120>)
 80001d8:	60fb      	str	r3, [r7, #12]
	uint32_t *mod_a=(uint32_t *)0x40020000;
 80001da:	4b44      	ldr	r3, [pc, #272]	@ (80002ec <main+0x124>)
 80001dc:	60bb      	str	r3, [r7, #8]
	uint32_t *idr_a=(uint32_t *)0x40020010;
 80001de:	4b44      	ldr	r3, [pc, #272]	@ (80002f0 <main+0x128>)
 80001e0:	607b      	str	r3, [r7, #4]
	 uint32_t *pulldown_a = (uint32_t *)0x4002000C;
 80001e2:	4b44      	ldr	r3, [pc, #272]	@ (80002f4 <main+0x12c>)
 80001e4:	603b      	str	r3, [r7, #0]

	*rcc|=(1<<3);//gpiod rcc clock enable
 80001e6:	697b      	ldr	r3, [r7, #20]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f043 0208 	orr.w	r2, r3, #8
 80001ee:	697b      	ldr	r3, [r7, #20]
 80001f0:	601a      	str	r2, [r3, #0]
	*rcc|=(1<<0); //gpioa clk enable
 80001f2:	697b      	ldr	r3, [r7, #20]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f043 0201 	orr.w	r2, r3, #1
 80001fa:	697b      	ldr	r3, [r7, #20]
 80001fc:	601a      	str	r2, [r3, #0]
	*mod_d&=~(15<<26);//clear bits
 80001fe:	693b      	ldr	r3, [r7, #16]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f023 5270 	bic.w	r2, r3, #1006632960	@ 0x3c000000
 8000206:	693b      	ldr	r3, [r7, #16]
 8000208:	601a      	str	r2, [r3, #0]
	*mod_d|=(5<<26);//config pd13 and pd 14
 800020a:	693b      	ldr	r3, [r7, #16]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f043 52a0 	orr.w	r2, r3, #335544320	@ 0x14000000
 8000212:	693b      	ldr	r3, [r7, #16]
 8000214:	601a      	str	r2, [r3, #0]
	*mod_a&=~(3<<1);//pa1 and pa2 as input
 8000216:	68bb      	ldr	r3, [r7, #8]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f023 0206 	bic.w	r2, r3, #6
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	601a      	str	r2, [r3, #0]
	*pulldown_a &= ~(3 << 2); //clear the bit
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f023 020c 	bic.w	r2, r3, #12
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	601a      	str	r2, [r3, #0]
    *pulldown_a |= (2 << 2);//enable pulldown res for PA1
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f043 0208 	orr.w	r2, r3, #8
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	601a      	str	r2, [r3, #0]
	*pulldown_a &= ~(3 << 4);//clear the bit
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	601a      	str	r2, [r3, #0]
	*pulldown_a |= (2 << 4);//enable pulldown res for PA2
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f043 0220 	orr.w	r2, r3, #32
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	601a      	str	r2, [r3, #0]

		while(1)
	{

			pin_state=(uint8_t)((*idr_a)&(3<<1));// Read PA1 and PA2 (masked)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	b2db      	uxtb	r3, r3
 8000258:	f003 0306 	and.w	r3, r3, #6
 800025c:	b2da      	uxtb	r2, r3
 800025e:	4b26      	ldr	r3, [pc, #152]	@ (80002f8 <main+0x130>)
 8000260:	701a      	strb	r2, [r3, #0]
			switch (pin_state)
 8000262:	4b25      	ldr	r3, [pc, #148]	@ (80002f8 <main+0x130>)
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2b06      	cmp	r3, #6
 8000268:	d8f3      	bhi.n	8000252 <main+0x8a>
 800026a:	a201      	add	r2, pc, #4	@ (adr r2, 8000270 <main+0xa8>)
 800026c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000270:	080002b5 	.word	0x080002b5
 8000274:	08000253 	.word	0x08000253
 8000278:	080002a7 	.word	0x080002a7
 800027c:	08000253 	.word	0x08000253
 8000280:	080002cf 	.word	0x080002cf
 8000284:	08000253 	.word	0x08000253
 8000288:	0800028d 	.word	0x0800028d
			{
			case 6:*odr_d|=(1<<13); // PA1 = 1, PA2 = 1
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	601a      	str	r2, [r3, #0]
			*odr_d&=~(1<<14);
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	601a      	str	r2, [r3, #0]
			break;
 80002a4:	e01b      	b.n	80002de <main+0x116>
			case 2:*odr_d&=~(3<<13);//PA1 = 1, PA2 = 0
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	601a      	str	r2, [r3, #0]
			break;
 80002b2:	e014      	b.n	80002de <main+0x116>
			case 0:*odr_d|=(1<<14);// PA1 = 0, PA2 = 0
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	601a      	str	r2, [r3, #0]
			*odr_d&=~(1<<13);
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	601a      	str	r2, [r3, #0]
			break;
 80002cc:	e007      	b.n	80002de <main+0x116>
			case 4:*odr_d|=(3<<13);// PA1 = 0, PA2 = 1
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f443 42c0 	orr.w	r2, r3, #24576	@ 0x6000
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	601a      	str	r2, [r3, #0]
			break;
 80002da:	bf00      	nop
 80002dc:	e7b9      	b.n	8000252 <main+0x8a>
			pin_state=(uint8_t)((*idr_a)&(3<<1));// Read PA1 and PA2 (masked)
 80002de:	e7b8      	b.n	8000252 <main+0x8a>
 80002e0:	40023830 	.word	0x40023830
 80002e4:	40020c00 	.word	0x40020c00
 80002e8:	40020c14 	.word	0x40020c14
 80002ec:	40020000 	.word	0x40020000
 80002f0:	40020010 	.word	0x40020010
 80002f4:	4002000c 	.word	0x4002000c
 80002f8:	2000001c 	.word	0x2000001c

080002fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002fc:	480d      	ldr	r0, [pc, #52]	@ (8000334 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000300:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000304:	480c      	ldr	r0, [pc, #48]	@ (8000338 <LoopForever+0x6>)
  ldr r1, =_edata
 8000306:	490d      	ldr	r1, [pc, #52]	@ (800033c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000308:	4a0d      	ldr	r2, [pc, #52]	@ (8000340 <LoopForever+0xe>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800030c:	e002      	b.n	8000314 <LoopCopyDataInit>

0800030e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000312:	3304      	adds	r3, #4

08000314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000318:	d3f9      	bcc.n	800030e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031a:	4a0a      	ldr	r2, [pc, #40]	@ (8000344 <LoopForever+0x12>)
  ldr r4, =_ebss
 800031c:	4c0a      	ldr	r4, [pc, #40]	@ (8000348 <LoopForever+0x16>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000320:	e001      	b.n	8000326 <LoopFillZerobss>

08000322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000324:	3204      	adds	r2, #4

08000326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000328:	d3fb      	bcc.n	8000322 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800032a:	f000 f811 	bl	8000350 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032e:	f7ff ff4b 	bl	80001c8 <main>

08000332 <LoopForever>:

LoopForever:
  b LoopForever
 8000332:	e7fe      	b.n	8000332 <LoopForever>
  ldr   r0, =_estack
 8000334:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800033c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000340:	080003b8 	.word	0x080003b8
  ldr r2, =_sbss
 8000344:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000348:	20000020 	.word	0x20000020

0800034c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800034c:	e7fe      	b.n	800034c <ADC_IRQHandler>
	...

08000350 <__libc_init_array>:
 8000350:	b570      	push	{r4, r5, r6, lr}
 8000352:	4d0d      	ldr	r5, [pc, #52]	@ (8000388 <__libc_init_array+0x38>)
 8000354:	4c0d      	ldr	r4, [pc, #52]	@ (800038c <__libc_init_array+0x3c>)
 8000356:	1b64      	subs	r4, r4, r5
 8000358:	10a4      	asrs	r4, r4, #2
 800035a:	2600      	movs	r6, #0
 800035c:	42a6      	cmp	r6, r4
 800035e:	d109      	bne.n	8000374 <__libc_init_array+0x24>
 8000360:	4d0b      	ldr	r5, [pc, #44]	@ (8000390 <__libc_init_array+0x40>)
 8000362:	4c0c      	ldr	r4, [pc, #48]	@ (8000394 <__libc_init_array+0x44>)
 8000364:	f000 f818 	bl	8000398 <_init>
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	10a4      	asrs	r4, r4, #2
 800036c:	2600      	movs	r6, #0
 800036e:	42a6      	cmp	r6, r4
 8000370:	d105      	bne.n	800037e <__libc_init_array+0x2e>
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f855 3b04 	ldr.w	r3, [r5], #4
 8000378:	4798      	blx	r3
 800037a:	3601      	adds	r6, #1
 800037c:	e7ee      	b.n	800035c <__libc_init_array+0xc>
 800037e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000382:	4798      	blx	r3
 8000384:	3601      	adds	r6, #1
 8000386:	e7f2      	b.n	800036e <__libc_init_array+0x1e>
 8000388:	080003b0 	.word	0x080003b0
 800038c:	080003b0 	.word	0x080003b0
 8000390:	080003b0 	.word	0x080003b0
 8000394:	080003b4 	.word	0x080003b4

08000398 <_init>:
 8000398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039a:	bf00      	nop
 800039c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039e:	bc08      	pop	{r3}
 80003a0:	469e      	mov	lr, r3
 80003a2:	4770      	bx	lr

080003a4 <_fini>:
 80003a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a6:	bf00      	nop
 80003a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003aa:	bc08      	pop	{r3}
 80003ac:	469e      	mov	lr, r3
 80003ae:	4770      	bx	lr
